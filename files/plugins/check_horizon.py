#!/usr/bin/env python3
"""Perform nagios checks to validate horizon connectivity and login."""

import argparse
import os
import subprocess

import nagios_plugin3

import requests
from requests.exceptions import ConnectionError, HTTPError, RequestException, Timeout


def check_horizon_connection(horizon_ip):
    """Check connectivity to horizon.

    Raises nagios errors if connection to horizon
    fails. If connection is good, it does nothing so that
    the program flow proceeds to check login(from main)

    :param horizon_ip: horizon_ip as a string
    """
    horizon_url = f"http://{horizon_ip}/horizon"

    try:
        requests.get(horizon_url, timeout=30)
    except Timeout:
        raise nagios_plugin3.WarnError("Request to horizon timed out")
    except ConnectionError:
        raise nagios_plugin3.CriticalError("Connection to horizon failed")
    except HTTPError:
        raise nagios_plugin3.CriticalError("Bad HTTP response from horizon")
    # If not caught above, handle with generic request exception
    except RequestException:
        raise nagios_plugin3.CriticalError("Failed to connect to horizon")


def horizon_login(dashboard_url, domain, username, password):
    """Check if login to horizon is possible, using the nagios credentials.

    On connecting, 'csrftoken' cookie is generated by django.
    (https://github.com/django/django/blob/stable/4.1.x/docs/howto/csrf.txt#L59)
    Using it, login is attempted with the nagios credentials.

    :param dashboard_url: horizon url in the format "http://0.0.0.0/horizon"
    :param domain: domain to login
    :param username: username to login
    :param password: password to login
    """
    login_url = f"{dashboard_url}/auth/login/"

    client = requests.Session()

    client.get(login_url)

    try:
        csrftoken = client.cookies["csrftoken"]
    except KeyError:
        raise nagios_plugin3.CriticalError("Horizon login failed: missing csrftoken")

    # build and send post request
    login_data = {
        "region": "default",
        "username": username,
        "password": password,
        "domain": domain,
        "next": "/horizon/project",
        "csrfmiddlewaretoken": csrftoken,
    }

    try:
        response = client.post(login_url, data=login_data, headers={"Referer": login_url})
    except HTTPError:
        raise nagios_plugin3.CriticalError("Horizon login failed: bad HTTP response")

    expected = "Sign Out"
    if expected in response.text:
        print("OK: Login to horizon successful")
    else:
        raise nagios_plugin3.CriticalError("Login to horizon unsuccessful")


def main():
    parser = argparse.ArgumentParser(description="Check horizon connectivity")
    parser.add_argument(
        "--env",
        dest="env",
        default="/var/lib/nagios/nagios.novarc",
        help="Novarc file to use for this check",
    )
    parser.add_argument("--ip", dest="ip", help="IP of openstack dashboard")
    args = parser.parse_args()
    # grab environment vars
    command = ["/bin/bash", "-c", "source {} && env".format(args.env)]
    proc = subprocess.Popen(command, stdout=subprocess.PIPE)
    for line in proc.stdout:
        key, _, value = line.partition(b"=")
        os.environ[key.decode("utf-8")] = value.rstrip().decode("utf-8")
    proc.communicate()

    # Check connection to horizon
    check_horizon_connection(args.ip)

    # Attempt login
    horizon_url = f"http://{args.ip}/horizon"
    nagios_username = os.environ["OS_USERNAME"]
    nagios_password = os.environ["OS_PASSWORD"]
    nagios_domain = os.environ["OS_USER_DOMAIN_NAME"]
    horizon_login(horizon_url, nagios_domain, nagios_username, nagios_password)


if __name__ == "__main__":  # pragma: no cover
    nagios_plugin3.try_check(main)
